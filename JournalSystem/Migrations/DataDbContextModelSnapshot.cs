// <auto-generated />
using System;
using JournalSystem.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JournalSystem.Migrations
{
    [DbContext(typeof(DataDbContext))]
    partial class DataDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JournalSystem.Entities.ArticleTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PaperId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaperId")
                        .IsUnique();

                    b.ToTable("ArticleTemplates");
                });

            modelBuilder.Entity("JournalSystem.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InstitutionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("RoleId")
                        .IsUnique()
                        .HasFilter("[RoleId] IS NOT NULL");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("JournalSystem.Entities.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("JournalSystem.Entities.Comments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PaperId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PaperId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("JournalSystem.Entities.EditDecisions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Decision")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EditDecisions");
                });

            modelBuilder.Entity("JournalSystem.Entities.Editor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InstitutionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("RoleId")
                        .IsUnique()
                        .HasFilter("[RoleId] IS NOT NULL");

                    b.ToTable("Editors");
                });

            modelBuilder.Entity("JournalSystem.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FieldName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("JournalSystem.Entities.Hop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EditDecisionsId")
                        .HasColumnType("int");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("NotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Notify")
                        .HasColumnType("bit");

                    b.Property<Guid>("PaperId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("EditDecisionsId");

                    b.HasIndex("EditorId");

                    b.HasIndex("NotificationId")
                        .IsUnique()
                        .HasFilter("[NotificationId] IS NOT NULL");

                    b.HasIndex("PaperId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("StatusId");

                    b.ToTable("Hops");
                });

            modelBuilder.Entity("JournalSystem.Entities.Institution", b =>
                {
                    b.Property<Guid>("InstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Institutiion_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InstitutionId");

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("JournalSystem.Entities.Issue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Issue_No")
                        .HasColumnType("int");

                    b.Property<string>("JournalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Volume")
                        .HasColumnType("int");

                    b.Property<DateTime>("YearPublished")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("JournalSystem.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date_Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Is_Read")
                        .HasColumnType("bit");

                    b.Property<string>("Notification_Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notification_Header")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("JournalSystem.Entities.Paper", b =>
                {
                    b.Property<Guid>("PaperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abstract")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HopCount")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("No_Pages")
                        .HasColumnType("int");

                    b.Property<DateTime>("Published")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("PaperId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("EditorId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TopicId");

                    b.ToTable("Papers");
                });

            modelBuilder.Entity("JournalSystem.Entities.Reviewer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InstitutionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("RoleId")
                        .IsUnique()
                        .HasFilter("[RoleId] IS NOT NULL");

                    b.ToTable("Reviewers");
                });

            modelBuilder.Entity("JournalSystem.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("JournalSystem.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RecieverRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("JournalSystem.Entities.Topic", b =>
                {
                    b.Property<Guid>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopicName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TopicId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("JournalSystem.Entities.ArticleTemplate", b =>
                {
                    b.HasOne("JournalSystem.Entities.Paper", "Paper")
                        .WithOne("ArticleTemplate")
                        .HasForeignKey("JournalSystem.Entities.ArticleTemplate", "PaperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paper");
                });

            modelBuilder.Entity("JournalSystem.Entities.Author", b =>
                {
                    b.HasOne("JournalSystem.Entities.Field", "Field")
                        .WithMany("Authors")
                        .HasForeignKey("FieldId");

                    b.HasOne("JournalSystem.Entities.Institution", "Institution")
                        .WithMany("Authors")
                        .HasForeignKey("InstitutionId");

                    b.HasOne("JournalSystem.Entities.Role", "Role")
                        .WithOne("Author")
                        .HasForeignKey("JournalSystem.Entities.Author", "RoleId");

                    b.Navigation("Field");

                    b.Navigation("Institution");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("JournalSystem.Entities.Comments", b =>
                {
                    b.HasOne("JournalSystem.Entities.Paper", "Paper")
                        .WithMany("Comments")
                        .HasForeignKey("PaperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paper");
                });

            modelBuilder.Entity("JournalSystem.Entities.Editor", b =>
                {
                    b.HasOne("JournalSystem.Entities.Field", "Field")
                        .WithMany("Editors")
                        .HasForeignKey("FieldId");

                    b.HasOne("JournalSystem.Entities.Institution", "Institution")
                        .WithMany("Editors")
                        .HasForeignKey("InstitutionId");

                    b.HasOne("JournalSystem.Entities.Role", "Role")
                        .WithOne("Editor")
                        .HasForeignKey("JournalSystem.Entities.Editor", "RoleId");

                    b.Navigation("Field");

                    b.Navigation("Institution");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("JournalSystem.Entities.Hop", b =>
                {
                    b.HasOne("JournalSystem.Entities.Author", null)
                        .WithMany("Hops")
                        .HasForeignKey("AuthorId");

                    b.HasOne("JournalSystem.Entities.EditDecisions", "EditDecisions")
                        .WithMany("Hops")
                        .HasForeignKey("EditDecisionsId");

                    b.HasOne("JournalSystem.Entities.Editor", null)
                        .WithMany("Hops")
                        .HasForeignKey("EditorId");

                    b.HasOne("JournalSystem.Entities.Notification", "Notifications")
                        .WithOne("Hop")
                        .HasForeignKey("JournalSystem.Entities.Hop", "NotificationId");

                    b.HasOne("JournalSystem.Entities.Paper", "Paper")
                        .WithMany("Hops")
                        .HasForeignKey("PaperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JournalSystem.Entities.Reviewer", null)
                        .WithMany("Hops")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("JournalSystem.Entities.Status", "Status")
                        .WithMany("Hops")
                        .HasForeignKey("StatusId");

                    b.Navigation("EditDecisions");

                    b.Navigation("Notifications");

                    b.Navigation("Paper");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("JournalSystem.Entities.Paper", b =>
                {
                    b.HasOne("JournalSystem.Entities.Author", "Author")
                        .WithMany("Papers")
                        .HasForeignKey("AuthorId");

                    b.HasOne("JournalSystem.Entities.Editor", "Editor")
                        .WithMany("Papers")
                        .HasForeignKey("EditorId");

                    b.HasOne("JournalSystem.Entities.Reviewer", "Reviewer")
                        .WithMany("Papers")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("JournalSystem.Entities.Topic", "Topic")
                        .WithMany("Papers")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Editor");

                    b.Navigation("Reviewer");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("JournalSystem.Entities.Reviewer", b =>
                {
                    b.HasOne("JournalSystem.Entities.Field", "Field")
                        .WithMany("Reviewers")
                        .HasForeignKey("FieldId");

                    b.HasOne("JournalSystem.Entities.Institution", "Institution")
                        .WithMany("Reviewers")
                        .HasForeignKey("InstitutionId");

                    b.HasOne("JournalSystem.Entities.Role", "Role")
                        .WithOne("Reviewer")
                        .HasForeignKey("JournalSystem.Entities.Reviewer", "RoleId");

                    b.Navigation("Field");

                    b.Navigation("Institution");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("JournalSystem.Entities.Topic", b =>
                {
                    b.HasOne("JournalSystem.Entities.Category", "Category")
                        .WithMany("Topics")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("JournalSystem.Entities.Author", b =>
                {
                    b.Navigation("Hops");

                    b.Navigation("Papers");
                });

            modelBuilder.Entity("JournalSystem.Entities.Category", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("JournalSystem.Entities.EditDecisions", b =>
                {
                    b.Navigation("Hops");
                });

            modelBuilder.Entity("JournalSystem.Entities.Editor", b =>
                {
                    b.Navigation("Hops");

                    b.Navigation("Papers");
                });

            modelBuilder.Entity("JournalSystem.Entities.Field", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Editors");

                    b.Navigation("Reviewers");
                });

            modelBuilder.Entity("JournalSystem.Entities.Institution", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Editors");

                    b.Navigation("Reviewers");
                });

            modelBuilder.Entity("JournalSystem.Entities.Notification", b =>
                {
                    b.Navigation("Hop");
                });

            modelBuilder.Entity("JournalSystem.Entities.Paper", b =>
                {
                    b.Navigation("ArticleTemplate");

                    b.Navigation("Comments");

                    b.Navigation("Hops");
                });

            modelBuilder.Entity("JournalSystem.Entities.Reviewer", b =>
                {
                    b.Navigation("Hops");

                    b.Navigation("Papers");
                });

            modelBuilder.Entity("JournalSystem.Entities.Role", b =>
                {
                    b.Navigation("Author");

                    b.Navigation("Editor");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("JournalSystem.Entities.Status", b =>
                {
                    b.Navigation("Hops");
                });

            modelBuilder.Entity("JournalSystem.Entities.Topic", b =>
                {
                    b.Navigation("Papers");
                });
#pragma warning restore 612, 618
        }
    }
}
